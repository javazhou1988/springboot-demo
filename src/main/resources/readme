1.responsebody注解入参，理解其他方式
2.ControllerAdvice和RestControllerAdvice，注解的类中用于定义的
@ExceptionHandler，@Binditter，@ModelAttrite 方法，
适用于限定范围下（默认包括所有控制器，可以通过basescanpackage，value，
annotations，basescanClass等方式
指定控制器范围）所有控制器中@RequestMapping修饰的方式。
3.梳理统一（全局）异常，统一响应数据格式，统一日志输出。深入研究demo
4.Guava,JSR 303 规范
Guava中的Preconditions类实现了很多入参方法的判断
jsr 303的validation规范(目前实现比较全的是hibernate实现的hibernate-validator)

介绍以下以上我所用到的技术:

1、Preconfitions.checkNotNull(T t)这个是使用Guava中的com.google.common.base.Preconditions进行判断的，因为service中用到的验证较多，所以建议将Preconfitions改成静态导入的方式:

import static com.google.common.base.Preconditions.checkNotNull;


2、BeanValidators.validateWithException(validator, address);
这个使用了hibernate实现的jsr 303规范来做的，需要传入一个validator和一个需要验证的实体,那么validator是如何获取的呢,如下:

@Configuration
public class BeanConfigs {

@Bean
public javax.validation.Validator getValidator(){
    return new LocalValidatorFactoryBean();
}
}
他将获取一个Validator对象，然后我们在service中进行注入便可以使用了:

 @Autowired
private Validator validator ;

====================
@Slf4j
@RestControllerAdvice
public class UnionExceptionHandler {

/**
* 应用到所有@RequestMapping注解方法，在其执行之前初始化数据绑定器
*
* @param binder
*/
@InitBinder
public void initBinder(WebDataBinder binder) {
log.info("binder.getFieldDefaultPrefix {}",binder.getFieldDefaultPrefix());
log.info("binder.getFieldMarkerPrefix {}",binder.getFieldMarkerPrefix());
}
/**
* 把值绑定到Model中，使全局@RequestMapping可以获取到该值
* @param model
*/
@ModelAttribute
public void addAttributes(Model model) {
model.addAttribute("author", "harry");
}
